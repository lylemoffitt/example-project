#ifndef VERSION_CT_API_H_
#define VERSION_CT_API_H_


namespace version {

/** CMake Project Version Info
 * \desc 
 *      Provides an API for version information about the CMake project.
 *      Information is populated at configuration time 
 *      and is available at compile time.
 */
struct project{
    constexpr project();

    /// Project Name
    /// \desc As recorded in PROJECT_NAME
    constexpr static const char *   name(){
        return "@PROJECT_NAME@";
    }

    /// Project Version
    /// \desc As recorded in PROJECT_VERSION
    constexpr static const char *   semver(){
        return "@PROJECT_VERSION@";
    }

    /// Project Data
    struct data_t{

        /// The name of the project
        /// \desc As recorded in PROJECT_NAME
        const char *    name;

        /// Project major version
        /// \desc As recorded in PROJECT_VERSION_MAJOR
        const unsigned  major;

        /// Project minor version
        /// \desc As recorded in PROJECT_VERSION_MINOR
        const unsigned  minor;

        /// Project patch version
        /// \desc As recorded in PROJECT_VERSION_PATCH
        const unsigned  patch;
    };

    /// Project Data
    constexpr static data_t data(){
        return data_t{
            .name   = name(),
            .major  = @PROJECT_VERSION_MAJOR@,
            .minor  = @PROJECT_VERSION_MINOR@,
            .patch  = @PROJECT_VERSION_PATCH@,
        };
    }
};

/** Git Repo Version Info
 * \desc 
 *      Provides an API for version information about the project source repo.
 *      Information is populated at configuration time 
 *      and  is available at compile time.
 */
struct git{
    constexpr git();

    /// Git description
    /// \desc As provided by `git describe`
    constexpr static const char *   desc(){
        return "@GIT_DESC@";
    }

    /// Git remote url
    /// \desc As provided by `git remote get-url $(git remote)`
    constexpr static const char *   url(){
        return "@GIT_REMOTE_URL@";
    }

    /// Git source branch
    /// \desc As provided by `git rev-parse --abbrev-ref HEAD`
    constexpr static const char *   branch(){
        return "@GIT_BRANCH@";
    }

    /// Git commit hash
    /// \desc As provided by `git rev-parse HEAD`
    constexpr static const char *   hash(){
        return "@GIT_HASH@";
    }

    /// Git working state
    /// \desc As provided by `git diff --quiet`
    constexpr static const bool     dirty(){
        return @GIT_DIRTY@;
    }

    /// Git version data
    struct data_t{

        /// Git remote url
        /// \desc As provided by `git remote get-url $(git remote)`
        const char *    url;

        /// Git source branch
        /// \desc As provided by `git rev-parse --abbrev-ref HEAD`
        const char *    branch;

        /// Git commit hash
        /// \desc As provided by `git rev-parse HEAD`
        const char *    hash;
        
        /// Git working state
        /// \desc As provided by `git diff --quiet`
        const bool      dirty;
    };

    /// Git version data
    constexpr static data_t data(){
        return data_t{
            .url    = url(),
            .branch = branch(),
            .hash   = hash(),
            .dirty  = dirty(),
        };
    }

};

} //namespace version

#endif // VERSION_CT_API_H_